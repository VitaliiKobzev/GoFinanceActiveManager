package main

import (
	"fmt"
	"math"
	"net/http"
	"net/url"
	"time"

	"gorm.io/gorm"
)

// –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è Telegram –±–æ—Ç–∞
type TelegramConfig struct {
	BotToken string
	ChatID   string
	Enabled  bool
}

// –∫–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram –±–æ—Ç–æ–º
type BotClient struct {
	config              TelegramConfig
	lastPortfolioValues map[uint]float64
	changeLimit         float64
	db                  *gorm.DB
}

// —ç–∫–∑–µ–º–ø–ª—è—Ä BotClient
func NewBotClient(config TelegramConfig, db *gorm.DB, changeLimit float64) *BotClient {
	return &BotClient{
		config:              config,
		lastPortfolioValues: make(map[uint]float64),
		changeLimit:         changeLimit,
		db:                  db,
	}
}

// –æ—Ç–ø—Ä–∞–≤–∫–∞
func (b *BotClient) SendNotification(message string) error {
	if !b.config.Enabled {
		return nil
	}

	apiURL := fmt.Sprintf("https://api.telegram.org/bot%s/sendMessage", b.config.BotToken)
	data := url.Values{
		"chat_id":    {b.config.ChatID},
		"text":       {message},
		"parse_mode": {"HTML"},
	}

	resp, err := http.PostForm(apiURL, data)
	if err != nil {
		return fmt.Errorf("error sending Telegram message: %v", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return fmt.Errorf("failed to send Telegram message, status code: %d", resp.StatusCode)
	}

	return nil
}

func startHourlyPriceCheck(b *BotClient) {
	b.CheckPortfolioChanges()
	ticker := time.NewTicker(1 * time.Hour)
	defer ticker.Stop()

	for range ticker.C {
		b.CheckPortfolioChanges()
	}
}

// CheckPortfolioChanges –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø–æ—Ä—Ç—Ñ–µ–ª–µ–π
func (b *BotClient) CheckPortfolioChanges() {
	var portfolios []Portfolio
	if err := b.db.Preload("Assets").Find(&portfolios).Error; err != nil {
		fmt.Printf("Error fetching portfolios: %v\n", err)
		return
	}

	// –§–ª–∞–≥ –ø–µ—Ä–≤–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
	isFirstRun := b.lastPortfolioValues == nil

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
	if isFirstRun {
		b.lastPortfolioValues = make(map[uint]float64)
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ—Ä—Ç—Ñ–µ–ª—è
	for _, portfolio := range portfolios {
		currentValue := calculatePortfolioValue(portfolio.Assets)

		if isFirstRun {
			// –ü—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ –ø—Ä–æ—Å—Ç–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
			b.lastPortfolioValues[portfolio.ID] = currentValue

			// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (–µ—Å–ª–∏ changeLimit = 0)
			if b.changeLimit == 0 {
				message := fmt.Sprintf(
					"üÜï <b>–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ—Ä—Ç—Ñ–µ–ª—è %s</b>\n"+
						"–ù–∞—á–∞–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: <b>%.2f ‚ÇΩ</b>",
					portfolio.Name,
					currentValue,
				)
				if err := b.SendNotification(message); err != nil {
					fmt.Printf("Error sending notification: %v\n", err)
				}
			}
			continue
		}

		lastValue, exists := b.lastPortfolioValues[portfolio.ID]
		if !exists {
			// –ù–æ–≤—ã–π –ø–æ—Ä—Ç—Ñ–µ–ª—å - —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
			b.lastPortfolioValues[portfolio.ID] = currentValue
			message := fmt.Sprintf(
				"üÜï <b>–î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π –ø–æ—Ä—Ç—Ñ–µ–ª—å %s</b>\n"+
					"–ù–∞—á–∞–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: <b>%.2f ‚ÇΩ</b>",
				portfolio.Name,
				currentValue,
			)
			if err := b.SendNotification(message); err != nil {
				fmt.Printf("Error sending notification: %v\n", err)
			}
			continue
		}

		if lastValue == 0 {
			// –ò–∑–±–µ–≥–∞–µ–º –¥–µ–ª–µ–Ω–∏—è –Ω–∞ –Ω–æ–ª—å
			continue
		}

		changePercent := (currentValue - lastValue) / lastValue * 100
		absChange := math.Abs(changePercent)

		if b.changeLimit == 0 || absChange >= b.changeLimit {
			// –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
			trend := "üìà"
			if changePercent < 0 {
				trend = "üìâ"
			}

			message := fmt.Sprintf(
				"%s <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–æ—Ä—Ç—Ñ–µ–ª—è %s</b> %s\n"+
					"–ò–∑–º–µ–Ω–µ–Ω–∏–µ: <b>%.2f%%</b>\n"+
					"–ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: <b>%.2f ‚ÇΩ</b>\n"+
					"–¢–µ–∫—É—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: <b>%.2f ‚ÇΩ</b>",
				trend,
				portfolio.Name,
				trend,
				changePercent,
				lastValue,
				currentValue,
			)

			// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
			if err := b.SendNotification(message); err != nil {
				fmt.Printf("Error sending notification: %v\n", err)
			}
		}

		// –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
		b.lastPortfolioValues[portfolio.ID] = currentValue
	}
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è
func calculatePortfolioValue(assets []Asset) float64 {
	total := 0.0
	for _, asset := range assets {
		total += asset.Price * asset.Quantity
	}
	return total
}

// SendDailyPortfolioReport –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç
func (b *BotClient) SendDailyPortfolioReport() {
	var portfolios []Portfolio
	b.db.Preload("Assets").Find(&portfolios)

	if len(portfolios) == 0 {
		return
	}

	message := "<b>–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –ø–æ—Ä—Ç—Ñ–µ–ª—è–º</b>\n\n"
	totalAllPortfolios := 0.0

	for _, portfolio := range portfolios {
		portfolioTotal := 0.0
		initialTotal := 0.0
		for _, asset := range portfolio.Assets {
			portfolioTotal += asset.Price * asset.Quantity
			initialTotal += asset.InitialPrice
		}
		totalAllPortfolios += portfolioTotal

		changePercent := 0.0
		if initialTotal > 0 {
			changePercent = (portfolioTotal - initialTotal) / initialTotal * 100
		}

		message += fmt.Sprintf(
			"<b>%s</b>\n"+
				"–¢–µ–∫—É—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: <b>%.2f ‚ÇΩ</b>\n"+
				"–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å –Ω–∞—á–∞–ª–∞: <b>%.2f%%</b>\n\n",
			portfolio.Name,
			portfolioTotal,
			changePercent,
		)
	}

	message += fmt.Sprintf("\n<b>–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤—Å–µ—Ö –ø–æ—Ä—Ç—Ñ–µ–ª–µ–π: %.2f ‚ÇΩ</b>", totalAllPortfolios)

	if err := b.SendNotification(message); err != nil {
		fmt.Printf("Error sending daily Telegram notification: %v\n", err)
	}
}

// StartDailyNotifications –∑–∞–ø—É—Å–∫–∞–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
func (b *BotClient) StartDailyNotifications() {

	b.SendDailyPortfolioReport()

	// –ó–∞–ø—É—Å–∫–∞–µ–º –≤ 17:00 –∫–∞–∂–¥—ã–π –¥–µ–Ω—å
	for {
		now := time.Now()
		next := time.Date(now.Year(), now.Month(), now.Day(), 17, 0, 0, 0, now.Location())
		if now.After(next) {
			next = next.Add(24 * time.Hour)
		}
		time.Sleep(next.Sub(now))

		b.SendDailyPortfolioReport()
	}
}
